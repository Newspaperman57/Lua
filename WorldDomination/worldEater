
-- initial move to designated area
y=0
x=0
q=0
d=0
L=0
R=0
x1=0
L1=0
R1=0
automatedbroadcast="1085"

function receive()
 
 rednet.broadcast(automatedbroadcast)

 a,b,c=rednet.receive()
 print(b)
 if b=="go" then
  eat()
 end
 if b=="newUnit" then
  wait()
 end
end

function eat()

-- receiving instructions

 a,L1,c=rednet.receive()
  print(L1)
  L1=tonumber(L1)
 a,R1,c=rednet.receive()
  print(R1)
  R1=tonumber(R1)
 a,x1,c=rednet.receive()
  print(x1)
  x1=tonumber(x1)
  
-- cheking for villians trying to dig out the hangar
  if x1 < 2 then
   x1 = 3
  end
  
-- leaving the hangar que
 if d > 0 then
  turtle.turnRight()
  turtle.turnRight()
  while turtle.detect() == true do
   sleep(2)
  end
  turtle.forward()
  turtle.turnLeft()
  while d > 0 do
   if turtle.detect() == true then
    sleep(1)
   end
   turtle.forward()
   d = d - 1
  end
  turtle.turnLeft()
 end

 -- acsending to designated flight height
 while y < 10 do
  while turtle.detectUp() == true do
   sleep(1)
  end
  turtle.up()
  y = y + 1
 end
-- moving to the left
 if L1 > 0 then
  L = L1
  turtle.turnLeft()
  while L1 > 0 do
   while turtle.detect() == true do
    sleep(1)
   end
   turtle.forward()
   L1 = L1 - 1
  end
  turtle.turnRight()
 end
-- moving to the right
 if R1 > 0 then
  R = R1
  turtle.turnRight()
  while R1 > 0 do
   while turtle.detect() == true do
    sleep(1)
   end
   turtle.forward()
   R1 = R1 - 1
  end
  turtle.turnLeft()
 end
-- moving forward
 while x < x1 do
  while turtle.detect() == true do
   sleep(1)
  end
  turtle.forward()
  x = x + 1
 end

-- digging down
 while q < 80 do
  if turtle.detectDown() == false then
   turtle.down()
   q = q + 1
  end
  if turtle.detectDown() == true then
   turtle.digDown()
   turtle.down()
   q = q + 1
  end
 end

-- return to surface   
 while q > 1 do
  if turtle.detectUp() == false then
   turtle.up()
   q = q - 1
  end
  if turtle.detectUp() == true then
   turtle.digUp()
  end
 end

 -- moving to landing lane
 x = x - 2
 turtle.turnRight()
 turtle.turnRight()
 while x > 0 do
  while turtle.detect() == true do
   sleep(1)
  end
  turtle.forward()
  x = x - 1
 end
 
-- moving back to drop off lane
 turtle.up()
 if L > 0 then
  turtle.turnLeft()
  while L > 0 do
   turtle.forward()
   L = L - 1
  end
  turtle.turnRight()
 end
 if R > 0 then
  turtle.turnRight()
  while R > 0 do
   turtle.forward()
   R = R - 1
  end
  turtle.turnLeft()
 end
 

-- drop off
  while x < 23 do
   turtle.forward()
   x = x + 1
  end
  
  turtle.select(1)
	 turtle.drop()
  turtle.select(2)
  turtle.drop()
  turtle.select(3)
  turtle.drop()
  turtle.select(4)
  turtle.drop()
  turtle.select(5)
  turtle.drop()
  turtle.select(6)
  turtle.drop()
  turtle.select(7)
  turtle.drop()
  turtle.select(8)
  turtle.drop()
  turtle.select(9)
  turtle.drop()
  turtle.select(1)
   turtle.turnRight()
   turtle.turnRight()
   turtle.down()
 
 x = x - 1
 while x > 0 do
  turtle.forward()
  x = x - 1
 end
 -- go to hangar entrance
 turtle.turnLeft()
 turtle.forward()
 turtle.turnRight()
 rednet.broadcast("newUnit")
 while y > 0 do
  if turtle.detectDown() == true then
   sleep(1)
  end
  turtle.down()
  y = y - 1
 end
 d = 1
end
function wait()
 turtle.turnLeft()
 turtle.forward()
 turtle.turnRight()
 d = d + 1
end
-- main
while 0 < 1 do
receive()
end
