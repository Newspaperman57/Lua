local arg = { ... } -- retreiving Arguments
-- Functions Start

---------------------------------------------------------
local function turtleTurn()
	if turn == "right" then -- Checks if the turtle is supposed to turn right
		turtle.turnRight()
		turtle.forward()
		turtle.placeDown()
		turtle.turnRight()
		turn = "left" -- Tells the turtle that next time it's supposed to turn left
		if orientation == "north" then
			orientation = "south"
		elseif orientation == "south" then
			orientation = "north"
		elseif orientation == "west" then
			orientation = "east"
		elseif orientation == "east" then
			orientation = "west"
		else
			print("ERROR: turtle.turn(): No orientation variable ")
			error()
		end
	elseif turn == "left" then -- Checks if the turtle is supposed to turn left
		turtle.turnLeft()
		turtle.forward()
		turtle.placeDown()
		turtle.turnLeft()
		turn = "right" -- Tells the turtle that next time it's supposed to turn right
		if orientation == "north" then
			orientation = "south"
		elseif orientation == "south" then
			orientation = "north"
		elseif orientation == "west" then
			orientation = "east"
		elseif orientation == "east" then
			orientation = "west"
		else
			print("ERROR: turtle.turn(): No orientation variable ")
			error()
		end
	else
		print("ERROR: turle.turn = No turn variable available") -- in case that the turtle doesn't know
		error() -- which way it should turn it throws an error.
	end
end
---------------------------------------------------------
function mainLoop()
	turtle.up() -- going to starting position
	turtle.placeDown()
	while yPos < arg[2] do
		while xPos < arg[1] do
			turtle.forward() -- Going forward
			turtle.placeDown() --  And placing block underneath the turtle
			xPos = xPos + 1
		end
		yPos = yPos + 1
		turtleTurn() -- Function to turn the turtle the right(correct) way
		while xPos > 1 do
			turtle.forward() -- Going forward
			turtle.placeDown() --  And placing block underneath the turtle
			xPos = xPos - 1
		end
	end
end
---------------------------------------------------------
-- Functions End
-- Program Start
-- Preparing Run
count = 1
fill = 0
while not arg[count] == nil do
	count = count + 1
	if count == 1 then
		arg[1] = tonumber(arg[1])
	elseif count == 2 then
		arg[2] = tonumber(arg[2])
	elseif count == 3 then
		arg[3] = tonumber(arg[3])
	elseif arg[count] == "help" or arg[count] == "Help" or arg[count] == "HELP" or arg[count] == "h" or arg[count] == "-h" or arg[count] == "-H" or arg[count] == "H" then
	-- This is the help message witch is activated when one of the arguments is one of the help arguments
		term.clear()
		term.setCursorPos(1,1)
		write("Press enter for next line")
		io.read()
		write("This API is used for building a ") 
		io.read()
		write("cube or plate. You must give the ")
		io.read()
		write("program. The dimensions of the cube")
		io.read()
		write("/plate thatyou wan't it to build. ")
		io.read()
		write("ex:[name_on_program] 2 2 2")
		io.read()
		write("This will make cube with 2 by 2 by")
		io.read()
		write("2 blocks if air inside. This")
		io.read()
		write("program can also build a plate. if")
		io.read()
		write("you wan't the program to build a")
		io.read()
		write("plate just give it 2 arguments")
		io.read()
		write("ex:[name_on_program] 2 2")
		io.read()
		write("This will make a plate with 2 by 2") 
		io.read()
		write("blocks. Remember to give the turtle")
		io.read()
		write("some materials to build of!")
		io.read()
		write("Other accepted arguments are:")
		io.read()
		print()
		write("help, Help, HELP, h, -h, -H, H")
		io.read()
		write("All these shows this message.")
		io.read()
		print()
		write("")
		term.clear()
		term.setCursorPos(1,1)
		return
	elseif arg[count] == "-f" or arg[count] == "-F" then
		fill = true
	else
	print("argument ", arg[count], "where not understanded. Please try again or  read the help section(-h)")
	break
	end
xPos = 0 -- This is the positioning variables used coordinating the turtle {
yPos = 0
zPos = 0 -- }
turn = "right" -- Tells the turle that it's supposed to go right first time it's going to turn
Orientation = ("north")

-- End of Preparing Run
-- Main
-- Writing Dimensions to screen {
write("Length: ")
print(arg[1])
write("Width: ")
print(arg[2])
write("Height: ")
print(arg[3]) 
-- }
mainLoop()